import requests
import time
import re
import os
import html
import json
from datetime import datetime

# ============== Configuration ==============
# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶® ---
BOT_TOKEN = '8400016903:AAFoa2BuZvspYrcpMVmEa8DpR_e7-5VC82w'       # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶®
CHAT_ID = '-1003061883450'             # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø
SESSION_ID = '0rt2r95olkp5kef02rsifkm7hv'     # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡ßá‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø ---
CHANNEL_BUTTON_TEXT = "YOUR CHANELL NAME"     # ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶≤‡ßá‡¶ñ‡¶æ
CHANNEL_USERNAME = "@pakcybertech"   # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ, @ ‡¶õ‡¶æ‡ßú‡¶æ)

SUPPORT_BUTTON_TEXT = " Numner Chanenl"         # ‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡ßü ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶≤‡ßá‡¶ñ‡¶æ
SUPPORT_USERNAME = "SAME AS FRIST " # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ (‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ, @ ‡¶õ‡¶æ‡ßú‡¶æ)
# ===========================================

# --- ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ---
COUNTRY_DATA = {
    '93': ('Afghanistan', 'üá¶üá´'), '355': ('Albania', 'üá¶üá±'), '213': ('Algeria', 'üá©üáø'), '1': ('USA', 'üá∫üá∏'), '376': ('Andorra', 'üá¶üá©'), 
    '244': ('Angola', 'üá¶üá¥'), '54': ('Argentina', 'üá¶üá∑'), '374': ('Armenia', 'üá¶üá≤'), '61': ('Australia', 'üá¶üá∫'), '43': ('Austria', 'üá¶üáπ'), 
    '994': ('Azerbaijan', 'üá¶üáø'), '973': ('Bahrain', 'üáßüá≠'), '880': ('Bangladesh', 'üáßüá©'), '375': ('Belarus', 'üáßüáæ'), '32': ('Belgium', 'üáßüá™'), 
    '501': ('Belize', 'üáßüáø'), '229': ('Benin', 'üáßüáØ'), '975': ('Bhutan', 'üáßüáπ'), '591': ('Bolivia', 'üáßüá¥'), '387': ('Bosnia & Herzegovina', 'üáßüá¶'), 
    '267': ('Botswana', 'üáßüáº'), '55': ('Brazil', 'üáßüá∑'), '673': ('Brunei', 'üáßüá≥'), '359': ('Bulgaria', 'üáßüá¨'), '226': ('Burkina Faso', 'üáßüá´'), 
    '257': ('Burundi', 'üáßüáÆ'), '855': ('Cambodia', 'üá∞üá≠'), '237': ('Cameroon', 'üá®üá≤'), '235': ('Chad', 'üáπüá©'), '56': ('Chile', 'üá®üá±'), 
    '86': ('China', 'üá®üá≥'), '57': ('Colombia', 'üá®üá¥'), '243': ('DR Congo', 'üá®üá©'), '242': ('Congo', 'üá®üá¨'), '506': ('Costa Rica', 'üá®üá∑'), 
    '385': ('Croatia', 'üá≠üá∑'), '53': ('Cuba', 'üá®üá∫'), '357': ('Cyprus', 'üá®üáæ'), '420': ('Czechia', 'üá®üáø'), '45': ('Denmark', 'üá©üá∞'), 
    '253': ('Djibouti', 'üá©üáØ'), '1809': ('Dominican Republic', 'üá©üá¥'), '593': ('Ecuador', 'üá™üá®'), '20': ('Egypt', 'üá™üá¨'), '503': ('El Salvador', 'üá∏üáª'), 
    '240': ('Equatorial Guinea', 'üá¨üá∂'), '291': ('Eritrea', 'üá™üá∑'), '372': ('Estonia', 'üá™üá™'), '251': ('Ethiopia', 'üá™üáπ'), '679': ('Fiji', 'üá´üáØ'), 
    '358': ('Finland', 'üá´üáÆ'), '33': ('France', 'üá´üá∑'), '241': ('Gabon', 'üá¨üá¶'), '220': ('Gambia', 'üá¨üá≤'), '995': ('Georgia', 'üá¨üá™'), 
    '49': ('Germany', 'üá©üá™'), '233': ('Ghana', 'üá¨üá≠'), '30': ('Greece', 'üá¨üá∑'), '502': ('Guatemala', 'üá¨üáπ'), '224': ('Guinea', 'üá¨üá≥'), 
    '509': ('Haiti', 'üá≠üáπ'), '504': ('Honduras', 'üá≠üá≥'), '852': ('Hong Kong', 'üá≠üá∞'), '36': ('Hungary', 'üá≠üá∫'), '354': ('Iceland', 'üáÆüá∏'), 
    '91': ('India', 'üáÆüá≥'), '62': ('Indonesia', 'üáÆüá©'), '98': ('Iran', 'üáÆüá∑'), '964': ('Iraq', 'üáÆüá∂'), '353': ('Ireland', 'üáÆüá™'), 
    '972': ('Israel', 'üáÆüá±'), '39': ('Italy', 'üáÆüáπ'), '1876': ('Jamaica', 'üáØüá≤'), '81': ('Japan', 'üáØüáµ'), '962': ('Jordan', 'üáØüá¥'), 
    '7': ('Kazakhstan', 'üá∞üáø'), '254': ('Kenya', 'üá∞üá™'), '82': ('South Korea', 'üá∞üá∑'), '965': ('Kuwait', 'üá∞üáº'), '996': ('Kyrgyzstan', 'üá∞üá¨'), 
    '856': ('Laos', 'üá±üá¶'), '371': ('Latvia', 'üá±üáª'), '961': ('Lebanon', 'üá±üáß'), '231': ('Liberia', 'üá±üá∑'), '218': ('Libya', 'üá±üáæ'), 
    '370': ('Lithuania', 'üá±üáπ'), '352': ('Luxembourg', 'üá±üá∫'), '261': ('Madagascar', 'üá≤üá¨'), '265': ('Malawi', 'üá≤üáº'), '60': ('Malaysia', 'üá≤üáæ'), 
    '960': ('Maldives', 'üá≤üáª'), '223': ('Mali', 'üá≤üá±'), '52': ('Mexico', 'üá≤üáΩ'), '373': ('Moldova', 'üá≤üá©'), '976': ('Mongolia', 'üá≤üá≥'), 
    '382': ('Montenegro', 'üá≤üá™'), '212': ('Morocco', 'üá≤üá¶'), '258': ('Mozambique', 'üá≤üáø'), '95': ('Myanmar', 'üá≤üá≤'), '264': ('Namibia', 'üá≥üá¶'), 
    '977': ('Nepal', 'üá≥üáµ'), '31': ('Netherlands', 'üá≥üá±'), '64': ('New Zealand', 'üá≥üáø'), '505': ('Nicaragua', 'üá≥üáÆ'), '227': ('Niger', 'üá≥üá™'), 
    '234': ('Nigeria', 'üá≥üá¨'), '47': ('Norway', 'üá≥üá¥'), '968': ('Oman', 'üá¥üá≤'), '92': ('Pakistan', 'üáµüá∞'), '507': ('Panama', 'üáµüá¶'), 
    '595': ('Paraguay', 'üáµüáæ'), '51': ('Peru', 'üáµüá™'), '63': ('Philippines', 'üáµüá≠'), '48': ('Poland', 'üáµüá±'), '351': ('Portugal', 'üáµüáπ'), 
    '974': ('Qatar', 'üá∂üá¶'), '40': ('Romania', 'üá∑üá¥'), '250': ('Rwanda', 'üá∑üáº'), '966': ('Saudi Arabia', 'üá∏üá¶'), '221': ('Senegal', 'üá∏üá≥'), 
    '381': ('Serbia', 'üá∑üá∏'), '65': ('Singapore', 'üá∏üá¨'), '421': ('Slovakia', 'üá∏üá∞'), '386': ('Slovenia', 'üá∏üáÆ'), '27': ('South Africa', 'üáøüá¶'), 
    '34': ('Spain', 'üá™üá∏'), '94': ('Sri Lanka', 'üá±üá∞'), '249': ('Sudan', 'üá∏üá©'), '46': ('Sweden', 'üá∏üá™'), '41': ('Switzerland', 'üá®üá≠'), 
    '963': ('Syria', 'üá∏üáæ'), '886': ('Taiwan', 'üáπüáº'), '255': ('Tanzania', 'üáπüáø'), '66': ('Thailand', 'üáπüá≠'), '228': ('Togo', 'üáπüá¨'), 
    '216': ('Tunisia', 'üáπüá≥'), '90': ('Turkey', 'üáπüá∑'), '993': ('Turkmenistan', 'üáπüá≤'), '256': ('Uganda', 'üá∫üá¨'), '380': ('Ukraine', 'üá∫üá¶'), 
    '971': ('United Arab Emirates', 'üá¶üá™'), '44': ('United Kingdom', 'üá¨üáß'), '598': ('Uruguay', 'üá∫üáæ'), '998': ('Uzbekistan', 'üá∫üáø'), 
    '58': ('Venezuela', 'üáªüá™'), '84': ('Vietnam', 'üáªüá≥'), '967': ('Yemen', 'üáæüá™'), '260': ('Zambia', 'üáøüá≤'), '263': ('Zimbabwe', 'üáøüáº')
}

LAST_MESSAGE_FILE = 'last_message_time.txt'

def get_country_info(number):
    if number.startswith('+'):
        number = number[1:]
    
    best_match_code = None
    for code in COUNTRY_DATA.keys():
        if number.startswith(code):
            if best_match_code is None or len(code) > len(best_match_code):
                best_match_code = code
    
    if best_match_code:
        return COUNTRY_DATA[best_match_code]
    return ('Unknown', '‚ùì')

def extract_otp(message):
    match = re.search(r'(\b\d{4,8}\b)', message)
    if match:
        return match.group(1)
    return "N/A"

def mask_number(number, prefix_len=7, suffix_len=2):
    n_len = len(number)
    if n_len <= prefix_len + suffix_len:
        if n_len > prefix_len:
            return number[:prefix_len] + '‚òÖ' * (n_len - prefix_len)
        return number + '‚òÖ'
    
    prefix = number[:prefix_len]
    suffix = number[-suffix_len:]
    num_masked_chars = n_len - (prefix_len + suffix_len)
    masked_part = '‚òÖ' * num_masked_chars
    return prefix + masked_part + suffix

def send_to_telegram(message, reply_markup=None):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    params = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'HTML',
        'reply_markup': json.dumps(reply_markup) if reply_markup else None
    }
    try:
        response = requests.post(url, data=params)
        response.raise_for_status()
        print("Message sent to Telegram successfully.")
    except requests.exceptions.RequestException as e:
        print(f"Failed to send message: {e}")

def fetch_data():
    try:
        from_date = datetime.now().strftime('%Y-%m-%d') + " 00:00:00"
        to_date = datetime.now().strftime('%Y-%m-%d') + " 23:59:59"
        timestamp = int(time.time() * 1000)
        params = {'fdate1': from_date, 'fdate2': to_date, 'sEcho': 1, 'iDisplayStart': 0, 'iDisplayLength': 25, 'iSortCol_0': 0, 'sSortDir_0': 'desc', '_': timestamp}
        url = "http://54.37.83.141/ints/agent/res/data_smscdr.php"
        headers = {'User-Agent': 'Mozilla/5.0', 'X-Requested-With': 'XMLHttpRequest', 'Referer': 'http://5.37.83.141/ints/agent/SMSCDRReports'}
        cookies = {'PHPSESSID': SESSION_ID}
        response = requests.get(url, params=params, headers=headers, cookies=cookies)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error fetching data: {e}")
        return None

def main():
    while True:
        print(f"Checking for new messages... ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")

        last_msg_timestamp = 0
        if os.path.exists(LAST_MESSAGE_FILE):
            with open(LAST_MESSAGE_FILE, 'r') as f:
                last_msg_timestamp = int(f.read().strip() or 0)

        data = fetch_data()

        if not data or 'aaData' not in data or not isinstance(data['aaData'], list):
            print("No valid data found. Waiting...")
            time.sleep(30)
            continue
        
        new_messages = []
        for row in data['aaData']:
            try:
                msg_timestamp = int(datetime.strptime(row[0], '%Y-%m-%d %H:%M:%S').timestamp())
                if msg_timestamp > last_msg_timestamp:
                    new_messages.append({
                        'timestamp': msg_timestamp,
                        'number': row[2],
                        'platform': row[3],
                        'message': row[5],
                    })
            except (IndexError, ValueError) as e:
                print(f"Skipping a row due to parsing error: {e}")
                continue
        
        if new_messages:
            new_messages.sort(key=lambda x: x['timestamp'])
            for msg in new_messages:
                country_name, flag = get_country_info(msg['number'])
                otp = extract_otp(msg['message'])
                service = msg['platform']
                masked_number = mask_number(msg['number'])

                text = (
                    f"{flag} <b>{country_name.upper()} {service.upper()} OTP RECEIVED</b>\n\n"
                    f"‚òéÔ∏è <b>NUMBER:</b> <code>{masked_number}</code>\n"
                    f"üîê <b>OTP CODE:</b> <code>{otp}</code>\n"
                    f"üßä <b>SERVICE:</b> {service.upper()}\n"
                    f"üåç <b>COUNTRY:</b> {flag} {country_name.upper()}\n"                                    
                    f"‚ô®Ô∏è <b>MESSAGE:</b>\n"
                    f"<pre>{html.escape(msg['message'])}</pre>"
                )
                
                keyboard = [
                    [
                        {"text": CHANNEL_BUTTON_TEXT, "url": f"https://t.me/{CHANNEL_USERNAME}"},
                        {"text": SUPPORT_BUTTON_TEXT, "url": f"https://t.me/{SUPPORT_USERNAME}"}
                    ]
                ]
                reply_markup = {"inline_keyboard": keyboard}
                
                send_to_telegram(text, reply_markup)
                
                with open(LAST_MESSAGE_FILE, 'w') as f:
                    f.write(str(msg['timestamp']))
                
                time.sleep(1)
        else:
            print("No new messages.")

        time.sleep(30)

if __name__ == "__main__":
    main()
